Block:
  { BlockStatements opt }
  
BlockStatements:
  BlockStatement
  BlockStatements BlockStatement

BlockStatement:
  LocalVariableDeclarationStatement
  ClassDeclaration
  Statement


LocalVariableDeclarationStatement:
  LocalVariableDeclaration ;

LocalVariableDeclaration:
  VariableModifiers Type VariableDeclarators


VariableDeclarators:
  VariableDeclarator
  VariableDeclarators , VariableDeclarator

VariableDeclarator:
  VariableDeclaratorId
  VariableDeclaratorId = VariableInitializer

VariableDeclaratorId:
  Identifier
  VariableDeclaratorId [ ]

VariableInitializer:
  Expression
  ArrayInitializer


Statement:
  StatementWithoutTrailingSubstatement
  LabeledStatement
  IfThenStatement
  IfThenElseStatement
  WhileStatement
  ForStatement

StatementWithoutTrailingSubstatement:
  Block
  EmptyStatement
  ExpressionStatement
  AssertStatement
  SwitchStatement
  DoStatement
  BreakStatement
  ContinueStatement
  ReturnStatement
  SynchronizedStatement
  ThrowStatement
  TryStatement

StatementNoShortIf:
  StatementWithoutTrailingSubstatement
  LabeledStatementNoShortIf
  IfThenElseStatementNoShortIf
  WhileStatementNoShortIf
  ForStatementNoShortIf


IfThenStatement:
  if ( Expression ) Statement

IfThenElseStatement:
  if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:
  if ( Expression ) StatementNoShortIf else StatementNoShortIf

EmptyStatement:
  ;


LabeledStatement:
  Identifier : Statement

LabeledStatementNoShortIf:
  Identifier : StatementNoShortIf


ExpressionStatement:
  StatementExpression ;

StatementExpression:
  Assignment
  PreIncrementExpression
  PreDecrementExpression
  PostIncrementExpression
  PostDecrementExpression
  MethodInvocation
  ClassInstanceCreationExpression


IfThenStatement:
  if ( Expression ) Statement

IfThenElseStatement:
  if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:
  if ( Expression ) StatementNoShortIf else StatementNoShortIf


AssertStatement:
  assert Expression1 ;
  assert Expression1 : Expression2 ;


SwitchStatement:
  switch ( Expression ) Switch Block

SwitchBlock:
  { SwitchBlockStatementGroups opt SwitchLabels opt }

SwitchBlockStatementGroups:
  SwitchBlockStatementGroup
  SwitchBlockStatementGroups SwitchBlockStatementGroup

SwitchBlockStatementGroup:
  SwitchLabels BlockStatements

SwitchLabels:
  SwitchLabel
  SwitchLabels SwitchLabel

SwitchLabel:
  case ConstantExpression :
  case EnumConstantName :
  default :

EnumConstantName:
  Identifier


WhileStatement:
  while ( Expression ) Statement

WhileStatementNoShortIf:
  while ( Expression ) StatementNoShortIf


ForStatement:
  BasicForStatement
  EnhancedForStatement


BasicForStatement:
  for ( ForInit opt ; Expression opt ; ForUpdate opt ) Statement

ForStatementNoShortIf:
  for ( ForInit opt ; Expression opt ; ForUpdate opt )
  StatementNoShortIf

ForInit:
  StatementExpressionList
  LocalVariableDeclaration

ForUpdate:
  StatementExpressionList

StatementExpressionList:
  StatementExpression
  StatementExpressionList , StatementExpression


EnhancedForStatement:
  for ( VariableModifiers opt Type Identifier : Expression ) Statement


BreakStatement:
  break Identifier opt ;


ContinueStatement:
  continue Identifier opt ;


ReturnStatement:
  return Expression opt ;


ThrowStatement:
  throw Expression ;


SynchronizedStatement:
  synchronized ( Expression ) Block


TryStatement:
  try Block Catches
  try Block Catches opt Finally

Catches:
  CatchClause
  Catches CatchClause

CatchClause:
  catch ( FormalParameter ) Block

Finally:
  finally Block

FormalParameter:
  VariableModifiers Type VariableDeclaratorId

VariableDeclaratorId:
  Identifier
  VariableDeclaratorId [ ]

